---
# In Ansible prior to 2.3, there was no way to prevent the os_user module from
# updating a user's password. This prevents us from setting a default password
# which the user may change.

- name: Check whether users exist
  os_user_facts:
    auth_type: "{{ os_projects_auth_type }}"
    auth: "{{ os_projects_admin_auth }}"
    domain: "{{ project.user_domain }}"
  environment: "{{ os_projects_environment }}"

- name: Update the user list with the authenticating user
  set_fact:
    openstack_users: >
      {{ openstack_users +
         [{'name': os_projects_admin_auth.username, 'enabled': True}] }}
  when:
    - os_projects_auth_type == 'password'
    - os_projects_admin_auth.project_name == project.name

- name: Ensure project users exist
  os_user:
    auth_type: "{{ os_projects_auth_type }}"
    auth: "{{ os_projects_admin_auth }}"
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    default_project: "{{ project.name }}"
    domain: "{{ project.user_domain }}"
    state: present
    enabled: True
    wait: yes
  with_items: "{{ project.users }}"
  when: >
    openstack_users |
    selectattr('name', 'equalto', item.name) |
    selectattr('enabled') |
    list |
    length == 0
  environment: "{{ os_projects_environment }}"

- name: Ensure project roles exist
  os_keystone_role:
    auth_type: "{{ os_projects_auth_type }}"
    auth: "{{ os_projects_admin_auth }}"
    name: "{{ item.1 }}"
    state: present
  with_subelements:
    - "{{ project.users }}"
    - roles
  environment: "{{ os_projects_environment }}"

- name: Ensure domain roles exist
  os_keystone_role:
    auth_type: "{{ os_projects_auth_type }}"
    auth: "{{ os_projects_admin_auth }}"
    name: "{{ item.1 }}"
    state: present
  with_subelements:
    - "{{ project.users }}"
    - domain_roles
  environment: "{{ os_projects_environment }}"

- name: Get domain ID for the domain
  os_keystone_domain_facts:
    auth_type: "{{ os_projects_auth_type }}"
    auth: "{{ os_projects_admin_auth }}"
    name: "{{ project.user_domain }}"
  with_items:
    - "{{ project.users }}"
  environment: "{{ os_projects_environment }}"

- name: Ensure domain users have required roles
  os_user_role:
    auth_type: "{{ os_projects_auth_type }}"
    auth: "{{ os_projects_admin_auth }}"
    user: "{{ item.0.name }}"
    domain: "{{ openstack_domains[0].id }}"
    role: "{{ item.1 }}"
    state: present
  with_subelements:
    - "{{ project.users }}"
    - domain_roles
  environment: "{{ os_projects_environment }}"

- name: Ensure project users have required roles
  os_user_role:
    auth_type: "{{ os_projects_auth_type }}"
    auth: "{{ os_projects_admin_auth }}"
    user: "{{ item.0.name }}"
    project: "{{ project.name }}"
    role: "{{ item.1 }}"
    state: present
  with_subelements:
    - "{{ project.users }}"
    - roles
  environment: "{{ os_projects_environment }}"
